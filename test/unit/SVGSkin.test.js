const chromelessTest = require('../fixtures/chromeless-tape');

chromelessTest('SVGSkin tests: 11 asserts: 7', async function (t, chromeless) {
    t.plan(7);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["on"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["on"]) || []),
                ['comment', 'getTest(...["off"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["off"]) || []),
                ['comment', 'getTest(...["id"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["id"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'rotationCenterIsArray(...[])'],
                ...(await (async function rotationCenterIsArray (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function rotationCenterIsArray (context) {
                            return [['ok', context.value.rotationCenter.length >= 2]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["orange50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["purple100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient50x50.svg",[50,50]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                            context.skin.setSVG(context.imageSource);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function () {
            return [
                ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["RenderWebGL","./RenderWebGL.js"]) || []),
                ['comment', 'createCanvas(...[])'],
                ...(await (async function createCanvas (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function createCanvas (context) {
                            context.canvas = document.createElement('canvas');
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'newRenderWebGL(...[])'],
                ...(await (async function newRenderWebGL (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newRenderWebGL (context) {
                            context.renderer = new context.module.RenderWebGL(context.canvas);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'skinIdTest(...[])'],
                ...(await (async function skinIdTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinIdTest (context) {
                            context.skinId = Math.random().toString().slice(2);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                ...(await (async function loadModuleVarTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function loadModuleVarTest (context, name, srcPath) {
                            context.module = context.module || {};
                            context.module[name] = window['scratch-render'](srcPath);
                            return [['ok', context.module[name]]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["SVGSkin","./SVGSkin.js"]) || []),
                ['comment', 'newSVGSkin(...[])'],
                ...(await (async function newSVGSkin (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function newSVGSkin (context) {
                            context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'willEmitEventTest(...["WasAltered"])'],
                ...(await (async function willEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function willEmitEventTest (context, event) {
                            context.event = context.event || {};
                            context.event[event] = {
                                called: false,
                                calledPromise: null,
                                call: []
                            };
                            context.event[event].calledPromise = new Promise(function (resolve) {
                                context.value.on(event, function (...args) {
                                    context.event[event].called = true;
                                    context.event[event].call.push(args);
                                    resolve(context.event[event]);
                                });
                            });
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                ...(await (async function loadSVG_fetch (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function loadSVG_fetch (context, name, size) {
                            context.imageSize = size;
                            context.imageSource = await fetch(`./assets/${name}`)
                            .then(response => response.text());
                            return [
                                ['comment', `fetch('./assets/${name}')`],
                                ['ok', typeof context.imageSource === 'string']
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["gradient100x100.svg",[100,100]]) || []),
                ['comment', '(...[])'],
                ...(await (async function  (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function  (context) {
                            context.oldImageRotationCenter = context.imageRotationCenter;
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'setSVG(...[])'],
                ...(await (async function setSVG (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function setSVG (context) {
                            context.imageRotationCenter = [10, 10];
                            context.skin.setSVG(context.imageSource, [10, 10]);
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'skinSize(...[])'],
                ...(await (async function skinSize (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinSize (context) {
                            const {size} = context.skin;
                            return [['same',
                                    [Math.ceil(size[0]), Math.ceil(size[1])],
                                    context.imageSize]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || []),
                ['comment', 'didEmitEventTest(...["WasAltered"])'],
                ...(await (async function didEmitEventTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (async function didEmitEventTest (context, event) {
                            return [
                                await Promise.race([
                                    context.event[event].calledPromise
                                    .then(({called}) => (['ok', called])),
                                    new Promise((resolve) => setTimeout(resolve, 100))
                                    .then(() => (['fail', 'timeout']))
                                ])
                            ];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["WasAltered"]) || []),
                ['comment', 'getTest(...["size"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["size"]) || []),
                ['comment', 'getTest(...["rotationCenter"])'],
                ...(await (async function getTest (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function getTest (context, key) {
                            return [['ok', key in context.value]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...["rotationCenter"]) || []),
                ['comment', 'skinRotationCenter(...[])'],
                ...(await (async function skinRotationCenter (...args) {
                    try {
                        const context = window.context = window.context || {};
                        return await (function skinRotationCenter (context) {
                            const {rotationCenter} = context.skin;
                            return [['same',
                                    [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                    context.imageRotationCenter]];
                        })(context, ...args);
                    } catch (e) {
                        return [['fail', e.stack || e.message]];
                    }
                })(...[]) || [])
            ];
        });
        (results || []).map(([fn, ...args]) => {
            if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});