const chromelessTest = require('../fixtures/chromeless-tape');

chromelessTest('SVGSkin tests: 11 asserts: 7', async function (t, chromeless) {
    t.plan(7);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 16 asserts: 10', async function (t, chromeless) {
    t.plan(10);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 21 asserts: 15', async function (t, chromeless) {
    t.plan(15);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["on"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["on"]) || []),
                    ['comment', 'getTest(...["off"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["off"]) || []),
                    ['comment', 'getTest(...["id"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["id"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'rotationCenterIsArray(...[])'],
                    ...(await (function rotationCenterIsArray (context) {
                        return [['ok', context.value.rotationCenter.length >= 2]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["orange50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["orange50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["purple100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["purple100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient50x50.svg",[50,50]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient50x50.svg",[50,50]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = context.imageSize.map(dim => dim / 2);
                        context.skin.setSVG(context.imageSource);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});chromelessTest('SVGSkin tests: 28 asserts: 19', async function (t, chromeless) {
    t.plan(19);
    try {
        const results = await chromeless.evaluate(async function (coverage) {
            try {
                window.__coverage__ = coverage;
                const context = {};
                return [
                    ['comment', 'loadModuleVarTest(...["RenderWebGL","./RenderWebGL.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["RenderWebGL","./RenderWebGL.js"]) || []),
                    ['comment', 'createCanvas(...[])'],
                    ...(await (function createCanvas (context) {
                        context.canvas = document.createElement('canvas');
                    })(context, ...[]) || []),
                    ['comment', 'newRenderWebGL(...[])'],
                    ...(await (function newRenderWebGL (context) {
                        context.renderer = new context.module.RenderWebGL(context.canvas);
                    })(context, ...[]) || []),
                    ['comment', 'skinIdTest(...[])'],
                    ...(await (function skinIdTest (context) {
                        context.skinId = Math.random().toString().slice(2);
                    })(context, ...[]) || []),
                    ['comment', 'loadModuleVarTest(...["SVGSkin","./SVGSkin.js"])'],
                    ...(await (function loadModuleVarTest (context, name, srcPath) {
                        context.module = context.module || {};
                        context.module[name] = window['scratch-render'](srcPath);
                        return [['ok', context.module[name]]];
                    })(context, ...["SVGSkin","./SVGSkin.js"]) || []),
                    ['comment', 'newSVGSkin(...[])'],
                    ...(await (function newSVGSkin (context) {
                        context.value = context.skin = new context.module.SVGSkin(context.skinId, context.renderer);
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || []),
                    ['comment', 'willEmitEventTest(...["WasAltered"])'],
                    ...(await (function (context, event) {
                        context.event = context.event || {};
                        context.event[event] = {
                            called: false,
                            calledPromise: null,
                            call: []
                        };
                        context.event[event].calledPromise = new Promise(function (resolve) {
                            context.value.on(event, function (...args) {
                                context.event[event].called = true;
                                context.event[event].call.push(args);
                                resolve(context.event[event]);
                            });
                        });
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'loadSVG_fetch(...["gradient100x100.svg",[100,100]])'],
                    ...(await (async function loadSVG_fetch (context, name, size) {
                        context.imageSize = size;
                        context.imageSource = await fetch(`./assets/${name}`)
                        .then(response => response.text());
                        return [
                            ['comment', `fetch('./assets/${name}')`],
                            ['ok', typeof context.imageSource === 'string']
                        ];
                    })(context, ...["gradient100x100.svg",[100,100]]) || []),
                    ['comment', '(...[])'],
                    ...(await (function (context) {
                        context.oldImageRotationCenter = context.imageRotationCenter;
                    })(context, ...[]) || []),
                    ['comment', 'setSVG(...[])'],
                    ...(await (function setSVG (context) {
                        context.imageRotationCenter = [10, 10];
                        context.skin.setSVG(context.imageSource, [10, 10]);
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'skinSize(...[])'],
                    ...(await (function skinSize (context) {
                        const {size} = context.skin;
                        return [['same',
                                [Math.ceil(size[0]), Math.ceil(size[1])],
                                context.imageSize]];
                    })(context, ...[]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.oldImageRotationCenter, 'rotationCenter has not updated yet']];
                    })(context, ...[]) || []),
                    ['comment', 'didEmitEventTest(...["WasAltered"])'],
                    ...(await (async function (context, event) {
                        return [
                            await Promise.race([
                                context.event[event].calledPromise
                                .then(({called}) => (['ok', called])),
                                new Promise((resolve) => setTimeout(resolve, 100))
                                .then(() => (['fail', 'timeout']))
                            ])
                        ];
                    })(context, ...["WasAltered"]) || []),
                    ['comment', 'getTest(...["size"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["size"]) || []),
                    ['comment', 'getTest(...["rotationCenter"])'],
                    ...(await (function getTest (context, key) {
                        return [['ok', key in context.value]];
                    })(context, ...["rotationCenter"]) || []),
                    ['comment', 'skinRotationCenter(...[])'],
                    ...(await (function skinRotationCenter (context) {
                        const {rotationCenter} = context.skin;
                        return [['same',
                                [Math.ceil(rotationCenter[0]), Math.ceil(rotationCenter[1])],
                                context.imageRotationCenter]];
                    })(context, ...[]) || [])
                ].concat([['coverage', window.__coverage__]]);
            } catch (e) {
                return [['fail', e.stack || e.message]];
            }
        }, global.__coverage__);
        (results || []).map(([fn, ...args]) => {
            if (fn === 'coverage') global.__coverage__ = args[0];
            else if (t[fn]) t[fn](...args);
        });
    } catch (e) {
        t.fail(e.stack || e.message || e);
    }
});